BS.BlockWithHandle = Class.create(BS.Blocks, {

  initialize: function($super, blockTypeId, blockId, collapsedByDefault, preinitialized) {
    var _handle;
    $super();
    this.blocksType = blockTypeId + blockId;
    this.blockId = blockId;
    this.collapsedByDefault = collapsedByDefault;

    if (!(_handle = this.getHandle())) return;

    this._cssOnly = _handle.hasClassName('handle_collapsed') || _handle.hasClassName('handle_expanded');

    this.getHandle().on("click", this.toggle.bindAsEventListener(this));

    if (!preinitialized) {
      this.changeState(this.blockId, true, !this.collapsedByDefault);
      this.restoreSavedBlocks();
    }
  },

  getId: function() {
    return this.blockId;
  },

  getHandle: function() {
    return $('blockHandle' + this.blockId);
  },

  toggle: function() {
    if (!this.getBlockContentElement(this.blockId)) {
      this.getHandle().hide();
      return;
    }
    BS.blockRefreshTemporary();

    this.getHandle().show();
    if (this.getHandle().hasClassName('handle_expanded')) {
      this.hideBlock();
    }
    else {
      this.showBlock();
    }
  },

  showBlock: function() {
    this.changeState(this.blockId, true, true);
    this._saveState();
  },

  hideBlock: function() {
    this.changeState(this.blockId, true, false);
    this._saveState();
  },

  onHideBlock: function() {
    this.getHandle().removeClassName('handle_expanded').addClassName('handle_collapsed');
  },

  onShowBlock: function() {
    this.getHandle().removeClassName('handle_collapsed').addClassName('handle_expanded');
  },

  getBlockContentElement: function() {
    return $("btb" + this.blockId);
  },

  // Override, because we have a single block here
  _deleteBlockData: function() {
    this._blocks = {};
  },

  // Override, because we have a single block here
  _addBlockData: function() {
    this._blocks["_"] = true;
  }
});


/**
 *  Support for collapsable blocks with handles.
 *
 *  We assume that the element is the header of the collapsable block. Usage is:
 *      jQuery('.group-header').make_collapsable(options);
 *
 *  This element may have attribute 'data-blockId' which contains identity of the block (several blocks may have the same identity).
 *  If the attribute is not set, block identity will be taken from the element ID (id="somesink").
 *  If the element doesn't have ID, it will be autogenerated.
 *
 *  Options (all optional):
 *     onStateChange - a method which takes 2 parameter: 1 - block element, 2 - boolean flag, true when block is shown
 *     registerForExpandAll - id of BS.CollapsableBlocks group for expand/collapse all operations
 *
 *
 *  Before calling make_collapsable() function, you should restore actual block state from user settings, in JSP:
 *
 *      ${util:blockHiddenJs(pageContext.request, blockIdentityId, wrapInScriptTag)}
 *          blockIdentityId - id of the block (same as data-blockId attribute);
 *          wrapInScriptTag - should be true if you place this call not in <script></script> block
 *
 *  Handle of the block - first IMG inside the header. You can use <bs:handle/> to generate it.
 *  If there is no handle, block won't be created.
 *
 *  Block content - the first sibling of the header element. To prevent blinking on initial page load, specify its visibility via style:
 *      style="${util:blockHiddenCss(pageContext.request, blockIdentityId, shouldBeCollapsedByDefault)}"
 *
 *  When block is expanded, it's header will have additional 'exp' CSS class.
 *
 *  Taglib 'util', used in code above, should be included to page as:
 *  <%@ taglib prefix="util" uri="/WEB-INF/functions/util"%>
 *
 */
(function($j) {
$j.fn.make_collapsable = function(options) {
  options = options || {};
  var expandAllGroup = options["registerForExpandAll"];
  var onStateChange = options["onStateChange"] || Prototype.emptyFunction;

  this.each(function() {
    if (this._simple_block) return;
    $(this).identify();

    this._simple_block = new BS.SimpleBlock(this, this.getAttribute('data-blockId'), this.getAttribute('data-collapsedByDefault'), onStateChange);
    if (expandAllGroup) {
      BS.CollapsableBlocks.registerBlock(this._simple_block, expandAllGroup);
    }
  });

  return this;
};

})(jQuery);

BS.SimpleBlock = Class.create(BS.BlockWithHandle, {
  initialize: function($super, element, blockId, collapsedByDefault, onStateChange) {
    this.elementId = element.identify();
    this.onStateChange = onStateChange;
    if (!blockId) blockId = this.elementId;
    $super(blockId, "", collapsedByDefault);
  },

  getId: function() {
    return this.elementId;
  },

  getHandle: function() {
    return $(this.elementId).down(".handle");
  },

  getBlockContentElement: function(id) {
    if (!$(this.elementId)) {
      BS.Log.warn("Cannot find block element " + this.elementId);
    }
    return $(this.elementId).next();
  },

  onShowBlock: function($super, contentElement, id) {
    $super(contentElement, id);
    $(this.elementId).addClassName("exp");
    this.onStateChange($(this.elementId), true);
  },

  onHideBlock: function($super, contentElement, id) {
    $super(contentElement, id);
    $(this.elementId).removeClassName("exp");
    this.onStateChange($(this.elementId), false);
  }
});

// =============== BuildType and PROJECT blocks ==========================

BS.BuildTypeBlock = Class.create(BS.BlockWithHandle, {
  initialize: function($super, blockTypeId, blockId) {
    this.headerId = blockId + "-div";
    $super(blockTypeId, blockId);
  },

  onShowBlock: function($super, contentElement, id) {
    $super(contentElement, id);
    this.updateHeader(true);
  },

  onHideBlock: function($super, contentElement, id) {
    $super(contentElement, id);
    this.updateHeader(false);
  },

  updateHeader: function(expanded) {
    var id = BS.Util.escapeId(this.headerId),
        header = $j(id);
    if (header.length) {
      header.toggleClass("exp");
      var problemsSummary = header.find(".problemsSummary");
      if (expanded) {
        problemsSummary.hide();
      } else {
        problemsSummary.show();
      }
      if (!expanded && !problemsSummary.length && BS.ProblemsSummary) {
        var btId = this.blockId;
        BS.ProblemsSummary.requestBuildTypeUpdate(btId);
      }
    } else {
      BS.Log.info("Could not find element " + this.headerId);
    }
  }
});

BS.ProjectBlock = Class.create(BS.BlockWithHandle, {
  initialize: function($super, blockTypeId, blockId, projectExternalId, collapsedByDefault) {
    this.projectId = blockId.substr('ovr_'.length);
    this.projectExternalId = projectExternalId;

    $super(blockTypeId, blockId, collapsedByDefault);

    this.clickOnHeaderShouldToggle();
    this._initialized = true;
  },

  clickOnHeaderShouldToggle: function() {
    var projectHeader = $("p_" + this.projectId).down(".projectHeader");
    projectHeader.on("click", function(e) {
      var element = Event.element(e);
      if (element.className.indexOf("handle") == -1 && element.tagName != "A") {
        this.toggle();
      }
    }.bindAsEventListener(this));
  },

  onShowBlock: function($super, contentElement, id) {
    var projectId = this.projectId;
    var projectExternalId = this.projectExternalId;
    if (this._initialized && BS.lazyLoadProject) {
      BS.lazyLoadProject(projectId, projectExternalId, !this.collapsedByDefault);
    }
    $super(contentElement, id);
    jQuery("#ph_" + projectId).addClass("exp");
  },

  onHideBlock: function($super,contentElement, id) {
    $super(contentElement, id);
    var projectId = this.projectId;
    jQuery("#ph_" + projectId).removeClass("exp");
  }
});
